<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TicTacToe</name>
    </assembly>
    <members>
        <member name="T:TicTacToe.Controllers.TicTacToeController">
            <summary>
            Entry point for TicTacToe API
            </summary>
        </member>
        <member name="M:TicTacToe.Controllers.TicTacToeController.ExecuteMove(TicTacToe.Models.GameBoardRequest)">
            <summary>
            Evaluates a Game Board and executes a move if the game is still in progress.
            </summary>
            <param name="request">An Object with a property (List of string) named 'GameBoard' that contains the current board</param>
            <returns>GameBoardResponse</returns>
        </member>
        <member name="M:TicTacToe.Controllers.TicTacToeController.CalculateMove(TicTacToe.Models.GameBoardRequestEC)">
            <summary>
            Accepts a game board with a PlayerSymbol and executes a move under that PlayerSymbol and evaluates it.
            </summary>
            <param name="request"></param>
            <returns>GameBoardResponseEC</returns>
        </member>
        <member name="M:TicTacToe.Controllers.TicTacToeController.DeleteNotAllowed">
            <summary>
            Disallow HttpDelete Verb
            </summary>
            <returns></returns>
        </member>
        <member name="M:TicTacToe.Controllers.TicTacToeController.GetNotAllowed">
            <summary>
            Disallow HttpGet Verb
            </summary>
            <returns></returns>
        </member>
        <member name="M:TicTacToe.Controllers.TicTacToeController.PutNotAllowed">
            <summary>
            Disallow HttpPut Verb
            </summary>
            <returns></returns>
        </member>
        <member name="M:TicTacToe.Controllers.TicTacToeController.PatchNotAllowed">
            <summary>
            Disallow HttpPatch Verb
            </summary>
            <returns></returns>
        </member>
        <member name="M:TicTacToe.Controllers.TicTacToeController.HeadNotAllowed">
            <summary>
            Disallow HttpHead Verb
            </summary>
            <returns></returns>
        </member>
        <member name="T:TicTacToe.Enums.GameWinnerStates">
            <summary>
            Game Winner States - X, O, tie or inconclusive. Enums can't hold strings (or I'm doing it wrong, so making const strings instead!)
            </summary>
        </member>
        <member name="F:TicTacToe.Enums.GameWinnerStates.X">
            <summary>
            Game Winner is X
            </summary>
        </member>
        <member name="F:TicTacToe.Enums.GameWinnerStates.O">
            <summary>
            Game Winner is O
            </summary>
        </member>
        <member name="F:TicTacToe.Enums.GameWinnerStates.Inconclusive">
            <summary>
            Game Winner is inconclusive (still an open move to be made)
            </summary>
        </member>
        <member name="F:TicTacToe.Enums.GameWinnerStates.Tie">
            <summary>
            Game is completed and Tied
            </summary>
        </member>
        <member name="T:TicTacToe.Models.GameBoardRequest">
            <summary>
            Model to define incoming payload of the GameBoard
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardRequest.GameBoard">
            <summary>
            Game Board containing open positions and moves
            </summary>
        </member>
        <member name="M:TicTacToe.Models.GameBoardRequest.ValidateBoard">
            <summary>
            Validates the state of the game board
            </summary>
            <returns>boolean value determining if the game board is valid or not</returns>
        </member>
        <member name="T:TicTacToe.Models.GameBoardRequestEC">
            <summary>
            GameBoardRequest for the Extra Credit. Same as GameBoardRequest, but allows for a playerSymbol in the incomming payload
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardRequestEC.PlayerSymbol">
            <summary>
            Symbol of the player who is making the move (X or O)
            </summary>
        </member>
        <member name="T:TicTacToe.Models.GameBoardResponse">
            <summary>
            Returned to the client as a response to a Game Board Evaluation or after a move has been made by an Azure Player
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponse.Move">
            <summary>
            Where at on the board the move was made
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponse.AzurePlayerSymbol">
            <summary>
            The symbol of the Azure Player
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponse.Winner">
            <summary>
            Player symbol of the winner
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponse.WinPositions">
            <summary>
            The specific positions of the winning combonation
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponse.GameBoard">
            <summary>
            The game board
            </summary>
        </member>
        <member name="M:TicTacToe.Models.GameBoardResponse.#ctor(TicTacToe.Models.GameBoardRequest)">
            <summary>
            Initializaer for GameBoardResponse
            </summary>
            <param name="gameBoard"></param>
        </member>
        <member name="T:TicTacToe.Models.GameBoardResponseEC">
            <summary>
            Returned to the client as a response to a Game Board Evaluation or after a move has been made by an Azure Player
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponseEC.Move">
            <summary>
            Where at on the board the move was made
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponseEC.PlayerSymbol">
            <summary>
            The symbol of the Player
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponseEC.Winner">
            <summary>
            Player symbol of the winner
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponseEC.WinPositions">
            <summary>
            The specific positions of the winning combonation
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameBoardResponseEC.GameBoard">
            <summary>
            The game board
            </summary>
        </member>
        <member name="M:TicTacToe.Models.GameBoardResponseEC.#ctor(TicTacToe.Models.GameBoardRequestEC)">
            <summary>
            Initializaer for GameBoardRequestEC
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:TicTacToe.Models.GameBoardResponseEC.ExecuteMove">
            <summary>
            Executes the next move on the board and sets the PlayerSymbol appropriately
            </summary>
        </member>
        <member name="T:TicTacToe.Models.GameEvaluationResult">
            <summary>
            Result of a game board evaluation
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameEvaluationResult.Winner">
            <summary>
            Winner X/O/inconclusive/tie
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameEvaluationResult.WinPositions">
            <summary>
            Win Positions of the winning combination
            </summary>
        </member>
        <member name="P:TicTacToe.Models.GameEvaluationResult.GameBoard">
            <summary>
            Resulting Game Board
            </summary>
        </member>
        <member name="M:TicTacToe.Models.GameEvaluationResult.#ctor(System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>
            Game Evaluation Initializer
            </summary>
            <param name="winner"></param>
            <param name="winPositions"></param>
            <param name="gameBoard"></param>
        </member>
        <member name="T:TicTacToe.Models.GameManager">
            <summary>
            Main class for making moves and evaluating a game board to determine a winner
            </summary>
        </member>
        <member name="M:TicTacToe.Models.GameManager.EvaluateGame(System.Collections.Generic.List{System.String})">
            <summary>
            Evaluates the current game board to determine a game winner state and return the response
            </summary>
            <returns>GameEvaluationResult</returns>
        </member>
        <member name="M:TicTacToe.Models.GameManager.ExecuteMoveAsAzurePlayer(TicTacToe.Models.GameBoardResponse)">
            <summary>
            Executes the next move on the board and sets the AzurePlayerSymbol appropriately
            </summary>
        </member>
        <member name="M:TicTacToe.Models.GameManager.ExecuteMoveAsGivenPlayer(TicTacToe.Models.GameBoardResponseEC)">
            <summary>
            Executes the next move on the board on behalf of the provided player symbol
            </summary>
        </member>
        <member name="M:TicTacToe.Models.GameManager.GuessBestMoveIndex(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Looks at the Game Board for any close-win patterns. A close win can be determined by checking to see any two player moves are
            close to each other. Example XX?, X?X, ?XX, OO?, O?O, ?OO. If there are no close wins, just take the first open space.
            </summary>
            <param name="playerSymbol"></param>
            <param name="gameBoard"></param>
            <returns></returns>
        </member>
        <member name="T:TicTacToe.Program">
            <summary>
            Main program class for application
            </summary>
        </member>
        <member name="M:TicTacToe.Program.Main(System.String[])">
            <summary>
            Main Method for Application
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:TicTacToe.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            WebHost Builder creation method.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:TicTacToe.Startup">
            <summary>
            Main Startup Class. This is the entry point of the application.
            </summary>
        </member>
        <member name="P:TicTacToe.Startup.HostingEnvironment">
            <summary>
            Hosting Environment class with environemnt variables and other information.
            </summary>
        </member>
        <member name="M:TicTacToe.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Method to insantiate the Startup class with the Configuration and Hosting Environment
            </summary>
            <param name="configuration"></param>
            <param name="hostingEnvironment"></param>
        </member>
        <member name="P:TicTacToe.Startup.Configuration">
            <summary>
            Configuration of the application
            </summary>
        </member>
        <member name="M:TicTacToe.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:TicTacToe.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="M:TicTacToe.Startup.ConfigureSwaggerUI(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Method to configure Swager UI
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
    </members>
</doc>
