// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TicTacToeSdk
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for TicTacToeSdkClient.
    /// </summary>
    public static partial class TicTacToeSdkClientExtensions
    {
            /// <summary>
            /// Evaluates a Game Board and executes a move if the game is still in
            /// progress.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// An Object with a property (List of string) named 'GameBoard' that contains
            /// the current board
            /// </param>
            public static GameBoardResponse ExecuteMove(this ITicTacToeSdkClient operations, GameBoardRequest request = default(GameBoardRequest))
            {
                return Task.Factory.StartNew(s => ((ITicTacToeSdkClient)s).ExecuteMoveAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Evaluates a Game Board and executes a move if the game is still in
            /// progress.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// An Object with a property (List of string) named 'GameBoard' that contains
            /// the current board
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GameBoardResponse> ExecuteMoveAsync(this ITicTacToeSdkClient operations, GameBoardRequest request = default(GameBoardRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteMoveWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Accepts a game board with a PlayerSymbol and executes a move under that
            /// PlayerSymbol and evaluates it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static GameBoardResponseEC CalculateMove(this ITicTacToeSdkClient operations, GameBoardRequestEC request = default(GameBoardRequestEC))
            {
                return Task.Factory.StartNew(s => ((ITicTacToeSdkClient)s).CalculateMoveAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accepts a game board with a PlayerSymbol and executes a move under that
            /// PlayerSymbol and evaluates it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GameBoardResponseEC> CalculateMoveAsync(this ITicTacToeSdkClient operations, GameBoardRequestEC request = default(GameBoardRequestEC), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CalculateMoveWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disallow HttpGet Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetNotAllowed(this ITicTacToeSdkClient operations)
            {
                Task.Factory.StartNew(s => ((ITicTacToeSdkClient)s).GetNotAllowedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disallow HttpGet Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetNotAllowedAsync(this ITicTacToeSdkClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetNotAllowedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Disallow HttpPut Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PutNotAllowed(this ITicTacToeSdkClient operations)
            {
                Task.Factory.StartNew(s => ((ITicTacToeSdkClient)s).PutNotAllowedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disallow HttpPut Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutNotAllowedAsync(this ITicTacToeSdkClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutNotAllowedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Disallow HttpDelete Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteNotAllowed(this ITicTacToeSdkClient operations)
            {
                Task.Factory.StartNew(s => ((ITicTacToeSdkClient)s).DeleteNotAllowedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disallow HttpDelete Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNotAllowedAsync(this ITicTacToeSdkClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteNotAllowedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Disallow HttpHead Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void HeadNotAllowed(this ITicTacToeSdkClient operations)
            {
                Task.Factory.StartNew(s => ((ITicTacToeSdkClient)s).HeadNotAllowedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disallow HttpHead Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadNotAllowedAsync(this ITicTacToeSdkClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.HeadNotAllowedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Disallow HttpPatch Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PatchNotAllowed(this ITicTacToeSdkClient operations)
            {
                Task.Factory.StartNew(s => ((ITicTacToeSdkClient)s).PatchNotAllowedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disallow HttpPatch Verb
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PatchNotAllowedAsync(this ITicTacToeSdkClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PatchNotAllowedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

    }
}
